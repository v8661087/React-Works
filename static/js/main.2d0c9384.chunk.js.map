{"version":3,"sources":["components/Header.jsx","components/List.jsx","components/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","type","onKeyUp","onChange","value","input","placeholder","onClick","onAdd","List","items","map","item","index","done","key","onCheck","modify","autoFocus","itemInput","onChangeItem","onItemKeyUp","onBlur","onModifyDone","title","onModify","onDelete","ToDoList","_useState","useState","_useState2","Object","slicedToArray","setInput","_useState3","_useState4","setItems","_useState5","_useState6","setItemInput","handleAdd","e","push","target","previousSibling","focus","useEffect","localStorage","getItem","list","JSON","parse","setItem","stringify","Fragment","components_Header","keyCode","components_List","filter","i","nextSibling","click","App","components_ToDoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d0c9384.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>To-Do List</h1>\r\n            <input\r\n                className=\"header__input\"\r\n                type=\"text\"\r\n                onKeyUp={props.onKeyUp}\r\n                onChange={props.onChange}\r\n                value={props.input}\r\n                placeholder=\"type something...\"\r\n            />\r\n            <input\r\n                className=\"header__submit\"\r\n                type=\"submit\"\r\n                value=\"ADD\"\r\n                onClick={props.onAdd}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction List(props) {\r\n    return (\r\n        <div className=\"list\">\r\n            <ul>\r\n                {props.items.map((item, index) => (\r\n                    <li\r\n                        className={\r\n                            item.done ? \"list-item checked\" : \"list-item\" //是否完成\r\n                        }\r\n                        key={index}\r\n                    >\r\n                        <span\r\n                            className=\"list-item__done\"\r\n                            onClick={() => props.onCheck(item)}\r\n                        ></span>\r\n                        \r\n                        {item.modify ? (\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"list-item__input\"\r\n                                autoFocus\r\n                                value={props.itemInput}\r\n                                onChange={props.onChangeItem}\r\n                                onKeyUp={props.onItemKeyUp}\r\n                                onBlur={() => props.onModifyDone(item)}\r\n                            />\r\n                        ) : item.done ? (\r\n                            <span className=\"list-item-title check\">{index + 1}. {item.title}</span>\r\n                        ) : (\r\n                            <span className=\"list-item-title\" onClick={() => props.onModify(item)}>\r\n                                {index + 1}. {item.title}\r\n                            </span>\r\n                        )}\r\n                        <span onClick={() => props.onModifyDone(item)}></span>\r\n                        <span\r\n                            className=\"list-item__delete\"\r\n                            onClick={() => props.onDelete(item)}\r\n                        >\r\n                            x\r\n                        </span>{\" \"}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default List;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Header from \"./Header\";\r\nimport List from \"./List\";\r\nfunction ToDoList() {\r\n    const [input, setInput] = useState(\"\");\r\n    const [items, setItems] = useState([]);\r\n    const [itemInput, setItemInput] = useState(\"\");\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"items-list\")) {\r\n            const list = JSON.parse(localStorage.getItem(\"items-list\"));\r\n            setItems(list);\r\n        } else {\r\n            localStorage.setItem(\"items-list\", JSON.stringify(items));\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        localStorage.setItem(\"items-list\", JSON.stringify(items));\r\n    }, [items, handleAdd]);\r\n    function handleChange(e) {\r\n        setInput(e.target.value);\r\n    }\r\n    function handleAdd(e) {\r\n        if (input !== \"\") {\r\n            let item = { title: input, done: false, modify: false };\r\n            items.push(item);\r\n            setItems(items);\r\n            setInput(\"\");\r\n        } else {\r\n            e.target.previousSibling.focus();\r\n        }\r\n    }\r\n    function handleCheck(item) {\r\n        item.done = !item.done;\r\n        setItems(items.map(item => item));\r\n    }\r\n    function handleModify(item) {\r\n        if (item.modify === false) {\r\n            item.modify = true;\r\n            setItemInput(item.title);\r\n            setItems(items.map(item => item));\r\n        }\r\n    }\r\n    function handleModifyDone(item) {\r\n        if (itemInput !== \"\") {\r\n            if (item.modify === true) {\r\n                item.modify = false;\r\n                item.title = itemInput;\r\n                setItems(items.map(item => item));\r\n                setItemInput(\"\");\r\n            }\r\n        } else {\r\n            item.modify = false;\r\n            setItems(items.map(item => item));\r\n            setItemInput(\"\");\r\n        }\r\n    }\r\n    function handleItemChange(e) {\r\n        setItemInput(e.target.value);\r\n    }\r\n    function handleDelete(item) {\r\n        setItems(items.filter(i => i !== item));\r\n    }\r\n    function handleKeyUp(e) {\r\n        if (e.keyCode === 13 && e.target.value) {\r\n            handleAdd();\r\n        }\r\n    }\r\n    function handleItemKeyUp(e) {\r\n        if (e.keyCode === 13) {\r\n            e.target.nextSibling.click();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header\r\n                onAdd={handleAdd}\r\n                onChange={handleChange}\r\n                onKeyUp={handleKeyUp}\r\n                input={input}\r\n            />\r\n            <List\r\n                onCheck={handleCheck}\r\n                onModify={handleModify}\r\n                onModifyDone={handleModifyDone}\r\n                onDelete={handleDelete}\r\n                items={items}\r\n                itemInput={itemInput}\r\n                onChangeItem={handleItemChange}\r\n                onItemKeyUp={handleItemKeyUp}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\nimport \"./todolist.scss\"\nimport ToDoList from './components/ToDoList'\nfunction App() {\n  return (\n    <ToDoList />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}